#!/usr/bin/env python
import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from std_msgs.msg import Float64
from sensor_msgs.msg import Image, CompressedImage
from turtlebot3_autorace_2023.msg import TracingParam

class DetectLane():
    def __init__(self):
        self.threshold = rospy.get_param("~lane")

        self.trace_yellow = False
        self.trace_white = False

        rospy.Subscriber('/detect/tracing', TracingParam, self.cb_get_tracing_param, queue_size=1)

        self.sub_image_type = "raw"
        self.pub_image_type = "compressed"

        if self.sub_image_type not in ["raw", "compressed"] or self.pub_image_type not in ["raw", "compressed"]:
            raise ValueError('`sub/pub_image_type` must be either "raw" or "compressed".')

        if self.sub_image_type == "raw":
            rospy.Subscriber('/detect/image', Image, self.cb_find_lane, queue_size=1)
        elif self.sub_image_type == "compressed":
            rospy.Subscriber('/detect/image/compressed', CompressedImage, self.cb_find_lane, queue_size=1)

        if self.pub_image_type == "raw":
            self.pub_image = rospy.Publisher('/lane/image', Image, queue_size=1)
        elif self.pub_image_type == "compressed":
            self.pub_image = rospy.Publisher('/lane/image/compressed', CompressedImage, queue_size=1)

        self.pub_center = rospy.Publisher('/driving/center', Float64, queue_size=1)

        self.cv_bridge = CvBridge()

        self.counter = 1

    def cb_get_tracing_param(self, tracing_param):
        self.trace_yellow = tracing_param.trace_yellow
        self.trace_white = tracing_param.trace_white
        print('get-it')

    def cb_find_lane(self, image_msg):
        if not self.trace_yellow and not self.trace_white:
            return
        elif self.counter % 3 != 0:
            self.counter += 1
            return
        else:
            self.counter = 1

        if self.sub_image_type == "raw":
            image = self.cv_bridge.imgmsg_to_cv2(image_msg, "bgr8")
        elif self.sub_image_type == "compressed":
            image = self.cv_bridge.compressed_imgmsg_to_cv2(image_msg, "bgr8")

        self.y = np.arange(image.shape[0])

        if self.trace_yellow:
            yellow_lane = self.mask_lane(image, 'yellow')
            self.left_x = self.fit_from_lane(yellow_lane)
        if self.trace_white:
            white_lane = self.mask_lane(image, 'white')
            self.right_x = self.fit_from_lane(white_lane)

        self.make_lane(image)

    def mask_lane(self, image, color):
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        mask = cv2.inRange(hsv, np.array(self.threshold[color]['lower']), np.array(self.threshold[color]['upper']))

        fraction = np.count_nonzero(mask)

        if color == 'yellow':
            if fraction > 35000:
                if self.threshold['yellow']['lower'][2] < 250:
                    self.threshold['yellow']['lower'][2] += 20
            elif fraction < 3000:
                if self.threshold['yellow']['lower'][2] > 90:
                    self.threshold['yellow']['lower'][2] -= 20
        elif color == 'white':
            if fraction > 35000:
                if self.threshold['white']['lower'][2] < 250:
                    self.threshold['white']['lower'][2] += 5
            elif fraction < 3000:
                if self.threshold['white']['lower'][2] > 50:
                    self.threshold['white']['lower'][2] -= 5

        return mask

    def fit_from_lane(self, image):
        nonzero = image.nonzero()
        coef = np.polyfit(nonzero[0], nonzero[1], 2)
        return np.polyval(coef, self.y)

    def make_lane(self, image):
        road_overlay = np.zeros((image.shape[0], image.shape[1], 3), dtype=np.uint8)
        lane_overlay = np.zeros((image.shape[0], image.shape[1], 3), dtype=np.uint8)

        try:
            if self.trace_yellow:
                left_pts = np.column_stack((self.left_x.astype(int), self.y)).reshape((-1, 1, 2))
                cv2.polylines(lane_overlay, [left_pts], isClosed=False, color=(0, 0, 255), thickness=25)
            if self.trace_white:
                right_pts = np.column_stack((self.left_x.astype(int), self.y))[::-1].reshape((-1, 1, 2))
                cv2.polylines(lane_overlay, [right_pts], isClosed=False, color=(255, 255, 0), thickness=25)

            if self.trace_yellow and self.trace_white:
                road_pts = np.concatenate((left_pts, right_pts))
                cv2.fillPoly(road_overlay, [road_pts], color=(0, 255, 0))
                center_x = ((self.left_x + self.right_x) / 2).astype(int)
            elif self.trace_yellow:
                center_x = np.add(self.left_x, 320)
            elif self.trace_white:
                center_x = np.subtract(self.left_x, 320)
            center_pts = np.column_stack((center_x, self.y)).reshape((-1, 1, 2))
            cv2.polylines(lane_overlay, [center_pts], isClosed=False, color=(0, 255, 255), thickness=12)

            image = cv2.addWeighted(image, 1, road_overlay, 0.2, 0)
            image = cv2.addWeighted(image, 1, lane_overlay, 1, 0)

            center_msg = Float64()
            center_msg.data = center_x.item(350)
            self.pub_center.publish(center_msg)

            if self.pub_image_type == "raw":
                self.pub_image.publish(self.cv_bridge.cv2_to_imgmsg(image, "bgr8"))
            elif self.pub_image_type == "compressed":
                self.pub_image.publish(self.cv_bridge.cv2_to_compressed_imgmsg(image, "jpg"))

        except NameError:
            raise Exception('TurtleBot3 has deviated from the road!')

if __name__ == '__main__':
    try:
        rospy.init_node('detect_lane')
        node = DetectLane()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
